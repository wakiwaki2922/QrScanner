import sys
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QVBoxLayout, QLabel, QDesktopWidget
from PyQt5.QtCore import Qt, QRect, pyqtSignal, QTimer
from PyQt5.QtGui import QPainter, QColor, QPen, QIcon, QFont
import mss
import pyperclip
from PIL import Image
from pyzbar import pyzbar

# --- C·ª≠a s·ªï Overlay ƒë·ªÉ ch·ªçn v√πng m√†n h√¨nh ---
class SelectionOverlay(QWidget):
    """
    ƒê√¢y l√† m·ªôt c·ª≠a s·ªï trong su·ªët, to√†n m√†n h√¨nh, cho ph√©p ng∆∞·ªùi d√πng
    v·∫Ω m·ªôt h√¨nh ch·ªØ nh·∫≠t ƒë·ªÉ ch·ªçn v√πng c·∫ßn qu√©t.
    """
    # T√≠n hi·ªáu ƒë∆∞·ª£c ph√°t ra khi ng∆∞·ªùi d√πng ƒë√£ ch·ªçn xong m·ªôt v√πng
    region_selected = pyqtSignal(QRect)

    def __init__(self):
        super().__init__()
        # L·∫•y k√≠ch th∆∞·ªõc m√†n h√¨nh
        screen_geometry = QDesktopWidget().screenGeometry()
        self.setGeometry(screen_geometry)

        # Thi·∫øt l·∫≠p c·ªù cho c·ª≠a s·ªï: kh√¥ng c√≥ vi·ªÅn, lu√¥n ·ªü tr√™n c√πng
        self.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)
        # Thi·∫øt l·∫≠p thu·ªôc t√≠nh ƒë·ªÉ l√†m cho n·ªÅn c·ª≠a s·ªï c√≥ th·ªÉ trong su·ªët
        self.setAttribute(Qt.WA_TranslucentBackground)
        # B·∫≠t theo d√µi chu·ªôt ngay c·∫£ khi kh√¥ng nh·∫•n n√∫t
        self.setMouseTracking(True)
        self.setCursor(Qt.CrossCursor)

        self.begin_pos = None
        self.end_pos = None
        self.is_selecting = False

    def paintEvent(self, event):
        """V·∫Ω l·ªõp ph·ªß v√† v√πng ƒë∆∞·ª£c ch·ªçn."""
        painter = QPainter(self)
        # V·∫Ω m·ªôt l·ªõp ph·ªß m√†u ƒëen b√°n trong su·ªët l√™n to√†n m√†n h√¨nh
        overlay_color = QColor(0, 0, 0, 100)
        painter.fillRect(self.rect(), overlay_color)

        if self.is_selecting and self.begin_pos and self.end_pos:
            # V√πng ƒë∆∞·ª£c ch·ªçn s·∫Ω ƒë∆∞·ª£c l√†m trong su·ªët ho√†n to√†n
            selection_rect = QRect(self.begin_pos, self.end_pos).normalized()
            painter.setCompositionMode(QPainter.CompositionMode_Clear)
            painter.fillRect(selection_rect, Qt.transparent)
            painter.setCompositionMode(QPainter.CompositionMode_SourceOver)
            
            # V·∫Ω m·ªôt ƒë∆∞·ªùng vi·ªÅn quanh v√πng ch·ªçn ƒë·ªÉ d·ªÖ nh√¨n
            pen = QPen(QColor("#42a5f5"), 2, Qt.SolidLine) # M√†u xanh d∆∞∆°ng
            painter.setPen(pen)
            painter.drawRect(selection_rect)

    def mousePressEvent(self, event):
        """B·∫Øt ƒë·∫ßu ch·ªçn khi nh·∫•n chu·ªôt tr√°i."""
        if event.button() == Qt.LeftButton:
            self.begin_pos = event.pos()
            self.end_pos = event.pos()
            self.is_selecting = True
            self.update()

    def mouseMoveEvent(self, event):
        """C·∫≠p nh·∫≠t v√πng ch·ªçn khi di chuy·ªÉn chu·ªôt."""
        if self.is_selecting:
            self.end_pos = event.pos()
            self.update()

    def mouseReleaseEvent(self, event):
        """Ho√†n t·∫•t ch·ªçn khi th·∫£ chu·ªôt tr√°i."""
        if event.button() == Qt.LeftButton and self.is_selecting:
            self.is_selecting = False
            selection_rect = QRect(self.begin_pos, self.end_pos).normalized()
            # Ph√°t t√≠n hi·ªáu ch·ª©a th√¥ng tin v·ªÅ v√πng ƒë√£ ch·ªçn
            self.region_selected.emit(selection_rect)
            self.close()

# --- C·ª≠a s·ªï ch√≠nh c·ªßa ·ª©ng d·ª•ng ---
class MainApp(QWidget):
    def __init__(self):
        super().__init__()
        self.selection_overlay = None
        self.init_ui()

    def init_ui(self):
        """Kh·ªüi t·∫°o giao di·ªán ng∆∞·ªùi d√πng."""
        self.setWindowTitle("üîç QR Scanner Pro - Qu√©t m√£ QR si√™u nhanh")
        self.setFixedSize(350, 200)
        
        # Thi·∫øt l·∫≠p icon cho ·ª©ng d·ª•ng
        self.setup_app_icon()
        self.setStyleSheet("""
            QWidget {
                background-color: #263238; /* N·ªÅn x√°m ƒëen */
                color: #ECEFF1; /* Ch·ªØ tr·∫Øng ng√† */
                font-family: 'Segoe UI', Arial, sans-serif;
            }
            QPushButton {
                background-color: #42a5f5; /* Xanh d∆∞∆°ng */
                color: white;
                font-size: 16px;
                font-weight: bold;
                padding: 12px;
                border: none;
                border-radius: 8px;
            }
            QPushButton:hover {
                background-color: #1e88e5; /* Xanh d∆∞∆°ng ƒë·∫≠m h∆°n */
            }
            QPushButton:pressed {
                background-color: #0d47a1; /* Xanh d∆∞∆°ng r·∫•t ƒë·∫≠m */
            }
            QLabel {
                font-size: 14px;
                color: #90A4AE; /* X√°m nh·∫°t */
                qproperty-alignment: 'AlignCenter';
            }
        """)

        # Layout ch√≠nh
        layout = QVBoxLayout()
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(15)

        # N√∫t ƒë·ªÉ b·∫Øt ƒë·∫ßu qu√©t
        self.scan_button = QPushButton("Qu√©t m√£ QR t·ª´ m√†n h√¨nh")
        self.scan_button.setCursor(Qt.PointingHandCursor)
        self.scan_button.clicked.connect(self.start_selection)

        # Nh√£n hi·ªÉn th·ªã tr·∫°ng th√°i/k·∫øt qu·∫£
        self.status_label = QLabel("Nh·∫•n n√∫t ƒë·ªÉ b·∫Øt ƒë·∫ßu ch·ªçn v√πng qu√©t.")
        self.status_label.setWordWrap(True)

        layout.addWidget(self.scan_button)
        layout.addWidget(self.status_label)
        layout.addStretch()

        self.setLayout(layout)
        self.center_window()
        self.show()

    def setup_app_icon(self):
        """Thi·∫øt l·∫≠p icon cho ·ª©ng d·ª•ng t·ª´ embedded resources ho·∫∑c file"""
        import os
        import sys
        from PyQt5.QtGui import QPixmap
        
        # T·∫°o icon t·ª´ code (fallback n·∫øu kh√¥ng c√≥ file)
        def create_icon_from_code():
            pixmap = QPixmap(32, 32)
            pixmap.fill(QColor(66, 165, 245))  # M√†u xanh d∆∞∆°ng ch√≠nh
            painter = QPainter(pixmap)
            painter.setPen(QPen(QColor(255, 255, 255), 2))
            # V·∫Ω khung QR ƒë∆°n gi·∫£n
            painter.drawRect(4, 4, 24, 24)
            painter.drawRect(6, 6, 8, 8)
            painter.drawRect(18, 6, 8, 8)
            painter.drawRect(6, 18, 8, 8)
            painter.end()
            return QIcon(pixmap)
        
        try:
            # Th·ª≠ c√°c path kh√°c nhau
            possible_paths = [
                'icon.ico',
                os.path.join(os.path.dirname(__file__), 'icon.ico'),
                os.path.join(sys._MEIPASS, 'icon.ico') if hasattr(sys, '_MEIPASS') else '',
                os.path.join(os.path.dirname(sys.executable), 'icon.ico')
            ]
            
            icon_loaded = False
            for path in possible_paths:
                if path and os.path.exists(path):
                    icon = QIcon(path)
                    if not icon.isNull():
                        self.setWindowIcon(icon)
                        # Thi·∫øt l·∫≠p cho to√†n b·ªô app (bao g·ªìm taskbar)
                        QApplication.instance().setWindowIcon(icon)
                        icon_loaded = True
                        break
            
            if not icon_loaded:
                # Fallback: t·∫°o icon t·ª´ code
                icon = create_icon_from_code()
                self.setWindowIcon(icon)
                QApplication.instance().setWindowIcon(icon)
                
        except Exception as e:
            # Fallback cu·ªëi c√πng
            icon = create_icon_from_code()
            self.setWindowIcon(icon)
            QApplication.instance().setWindowIcon(icon)

    def center_window(self):
        """Canh gi·ªØa c·ª≠a s·ªï ·ª©ng d·ª•ng tr√™n m√†n h√¨nh."""
        qr = self.frameGeometry()
        cp = QDesktopWidget().availableGeometry().center()
        qr.moveCenter(cp)
        self.move(qr.topLeft())

    def start_selection(self):
        """B·∫Øt ƒë·∫ßu qu√° tr√¨nh ch·ªçn v√πng m√†n h√¨nh."""
        self.hide() # ·∫®n c·ª≠a s·ªï ch√≠nh
        # Th√™m m·ªôt ƒë·ªô tr·ªÖ nh·ªè ƒë·ªÉ ƒë·∫£m b·∫£o c·ª≠a s·ªï ch√≠nh ƒë√£ ·∫©n ho√†n to√†n
        QTimer.singleShot(150, self.show_overlay)

    def show_overlay(self):
        """Hi·ªÉn th·ªã l·ªõp ph·ªß ƒë·ªÉ ch·ªçn v√πng."""
        self.selection_overlay = SelectionOverlay()
        self.selection_overlay.region_selected.connect(self.process_region)
        self.selection_overlay.show()

    def process_region(self, region):
        """Ch·ª•p ·∫£nh, qu√©t m√£ QR v√† x·ª≠ l√Ω k·∫øt qu·∫£."""
        try:
            # S·ª≠ d·ª•ng mss ƒë·ªÉ ch·ª•p ·∫£nh v√πng ƒë√£ ch·ªçn
            with mss.mss() as sct:
                monitor = {
                    "top": region.top(),
                    "left": region.left(),
                    "width": region.width(),
                    "height": region.height()
                }
                sct_img = sct.grab(monitor)
                # Chuy·ªÉn ƒë·ªïi ·∫£nh sang ƒë·ªãnh d·∫°ng m√† pyzbar c√≥ th·ªÉ ƒë·ªçc
                pil_img = Image.frombytes("RGB", sct_img.size, sct_img.bgra, "raw", "BGRX")

            # S·ª≠ d·ª•ng pyzbar ƒë·ªÉ gi·∫£i m√£ QR code
            decoded_objects = pyzbar.decode(pil_img)

            if decoded_objects:
                # L·∫•y d·ªØ li·ªáu t·ª´ m√£ QR ƒë·∫ßu ti√™n t√¨m th·∫•y
                qr_data = decoded_objects[0].data.decode("utf-8")
                pyperclip.copy(qr_data)
                
                # C·∫Øt b·ªõt n·ªôi dung n·∫øu qu√° d√†i ƒë·ªÉ hi·ªÉn th·ªã
                display_text = (qr_data[:60] + '...') if len(qr_data) > 60 else qr_data
                self.status_label.setText(f"<font color='#4CAF50'><b>Th√†nh c√¥ng!</b></font><br>ƒê√£ sao ch√©p v√†o clipboard:<br><i>{display_text}</i>")
            else:
                self.status_label.setText("<font color='#F44336'><b>Kh√¥ng t√¨m th·∫•y m√£ QR.</b></font><br>Vui l√≤ng th·ª≠ l·∫°i v·ªõi v√πng ch·ªçn r√µ r√†ng h∆°n.")

        except Exception as e:
            self.status_label.setText(f"<font color='#F44336'><b>ƒê√£ x·∫£y ra l·ªói:</b></font><br>{str(e)}")
        finally:
            # Hi·ªÉn th·ªã l·∫°i c·ª≠a s·ªï ch√≠nh sau khi x·ª≠ l√Ω xong
            self.show()
            self.activateWindow()


if __name__ == '__main__':
    app = QApplication(sys.argv)
    
    # Thi·∫øt l·∫≠p App ID ƒë·ªÉ Windows nh·∫≠n di·ªán ƒë√∫ng tr√™n taskbar
    try:
        import ctypes
        ctypes.windll.shell32.SetCurrentProcessExplicitAppUserModelID('QRScannerPro.QRScanner.1.0')
    except:
        pass
    
    ex = MainApp()
    sys.exit(app.exec_())
